// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	model "github.com/mateusmacedo/go-ether-sdk/test/fixture/blog/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// FindAuthorByNameService is an autogenerated mock type for the FindAuthorByNameService type
type FindAuthorByNameService struct {
	mock.Mock
}

// FindAuthorByName provides a mock function with given fields: name
func (_m *FindAuthorByNameService) FindAuthorByName(name string) (*model.Author, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FindAuthorByName")
	}

	var r0 *model.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Author, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Author); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFindAuthorByNameService creates a new instance of FindAuthorByNameService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFindAuthorByNameService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FindAuthorByNameService {
	mock := &FindAuthorByNameService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
