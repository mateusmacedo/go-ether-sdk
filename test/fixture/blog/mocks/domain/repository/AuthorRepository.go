// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	model "github.com/mateusmacedo/go-ether-sdk/domain/model"
	repository "github.com/mateusmacedo/go-ether-sdk/test/fixture/blog/domain/repository"
	mock "github.com/stretchr/testify/mock"
)

// AuthorRepository is an autogenerated mock type for the AuthorRepository type
type AuthorRepository struct {
	mock.Mock
}

// FindByName provides a mock function with given fields: name
func (_m *AuthorRepository) FindByName(name string) (repository.FindByNameResult, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 repository.FindByNameResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.FindByNameResult, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) repository.FindByNameResult); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.FindByNameResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *AuthorRepository) GetByID(id interface{}) (model.Entity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (model.Entity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(interface{}) model.Entity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Persist provides a mock function with given fields: entity
func (_m *AuthorRepository) Persist(entity model.Entity) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Persist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Entity) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthorRepository creates a new instance of AuthorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorRepository {
	mock := &AuthorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
